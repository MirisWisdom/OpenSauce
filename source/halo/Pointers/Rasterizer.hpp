/*
Yelo: Open Sauce SDK
Halo 1 (CE) Edition

See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Pointers/1.10/HaloCE_110_Runtime.Rasterizer.inl"
#include "Pointers/1.10/HaloCE_110_Runtime_Manual.Rasterizer.inl"
#endif

#include <blamlib/rasterizer/dx9/rasterizer_dx9_render_targets.hpp>
#include <blamlib/rasterizer/rasterizer.hpp>
#include <blamlib/render/render.hpp>
#include <Memory/MemoryInterface.hpp>
#include <yelolib/memory/memory_interface_base.hpp>

namespace Yelo
{
	namespace Rasterizer
	{
		static real_matrix3x4** K_VSH_CONSTANTS__NODEMATRICES_REFERENCES[] = {
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_0),
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_1),
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_2),
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_3),
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_4),
			CAST_PTR(real_matrix3x4**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCE_5),
		};
		static void** K_VSH_CONSTANTS__NODEMATRICES_REFERENCES_PLUS_8[] = {
			CAST_PTR(void**,K_VSH_CONSTANTS__NODEMATRICES_REFERENCES_PLUS_8_0),
		};

		ENGINE_PTR(s_rasterizer_config, rasterizer_config, K_RASTERIZER_CONFIG, PTR_NULL);
		ENGINE_PTR(s_rasterizer_globals, rasterizer_globals, K_RASTERIZER_GLOBALS, PTR_NULL);
		ENGINE_PTR(s_rasterizer_debug_options, rasterizer_debug_data, K_RASTERIZER_DEBUG_DATA, PTR_NULL);
		ENGINE_PTR(s_rasterizer_frame_parameters, rasterizer_frame_params, K_RASTERIZER_FRAME_PARAMS, PTR_NULL);

		FUNC_PTR(RASTERIZER_DISPOSE, K_RASTERIZER_DISPOSE, FUNC_PTR_NULL);
		FUNC_PTR(RASTERIZER_DISPOSE_CALL_FROM_RASTERIZER, K_RASTERIZER_DISPOSE_CALL_FROM_RASTERIZER, FUNC_PTR_NULL);
		FUNC_PTR(RASTERIZER_DISPOSE_CALL_FROM_SHELL, K_RASTERIZER_DISPOSE_CALL_FROM_SHELL, FUNC_PTR_NULL);


		static void** K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_LIST[] = {
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_0),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_1),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_2),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_3),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_4),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_5),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_6),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_7),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_8),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_9),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_10),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_11),
			CAST_PTR(void**,K_RENDERED_TRIANGLE_ARRAY_UPGRADE_ADDRESS_12),
		};
		static uint16* K_MAXIMUM_RENDERED_TRIANGLES_UPGRADE_ADDRESS_LIST[] = {
			CAST_PTR(uint16*,K_MAXIMUM_RENDERED_TRIANGLES_UPGRADE_ADDRESS_0),
			CAST_PTR(uint16*,K_MAXIMUM_RENDERED_TRIANGLES_UPGRADE_ADDRESS_1),
			CAST_PTR(uint16*,K_MAXIMUM_RENDERED_TRIANGLES_UPGRADE_ADDRESS_2),
			CAST_PTR(uint16*,K_MAXIMUM_RENDERED_TRIANGLES_UPGRADE_ADDRESS_3),
		};

		ENGINE_PTR(DWORD, RASTERIZER_DYNAMIC_GEOMETRY_INITIALIZE__CreateIndexBuffer_Length_ARG, K_RASTERIZER_DYNAMIC_GEOMETRY_INITIALIZE__CREATEINDEXBUFFER_LENGTH_ARG, PTR_NULL);

		ENGINE_PTR(DWORD, RASTERIZER_DEVICE_ADAPTER_INDEX, K_RASTERIZER_DEVICE_ADAPTER_INDEX, PTR_NULL);

		static char** K_SCREENSHOT_FOLDER_REFERENCES[] = {
			CAST_PTR(char**,K_SCREENSHOT_FOLDER_REFERENCE_0),
			CAST_PTR(char**,K_SCREENSHOT_FOLDER_REFERENCE_1),
		};
	}

	namespace Render
	{
		ENGINE_PTR(s_render_window, render_window, K_RENDER_WINDOW, PTR_NULL);
		ENGINE_PTR(s_render_globals, render_globals, K_RENDER_GLOBALS, PTR_NULL);
		ENGINE_PTR(s_render_target, global_render_targets, K_GLOBAL_RENDER_TARGETS, PTR_NULL);
		ENGINE_PTR(s_structure_render_globals, structure_render_globals, K_STRUCTURE_RENDER_GLOBALS, PTR_NULL);

		FUNC_PTR(RENDER_WINDOW_REFLECTION_CALL, K_RENDER_WINDOW_REFLECTION_CALL, FUNC_PTR_NULL);
		FUNC_PTR(RENDER_WINDOW_REFLECTION_CALL_RETN, K_RENDER_WINDOW_REFLECTION_CALL_RETN, FUNC_PTR_NULL);

		FUNC_PTR(RENDER_WINDOW_END_HOOK, K_RENDER_WINDOW_END_HOOK, FUNC_PTR_NULL);
	}
}

/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Memory/1.10/Pointers/HaloCE_110_Runtime.Rasterizer.ShaderExtension.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Runtime_Manual.Rasterizer.ShaderExtension.inl"
#endif

#include <YeloLib/memory/memory_interface_base.hpp>
#include <Memory/MemoryInterface.hpp>

namespace Yelo
{
	namespace Rasterizer
	{
		namespace ShaderExtension
		{
			namespace Model
			{
				static void** K_SHADER_USAGE_ID_ARRAY_REFERENCES[] = {
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_0),
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_1),
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_2),
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_3),
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_4),
					CAST_PTR(void**,K_SHADER_USAGE_ID_ARRAY_REFERENCE_5),
				};

				ENGINE_PTR(int, RASTERIZER_MODEL_SHADER_LOAD_COUNT, K_RASTERIZER_MODEL_SHADER_LOAD_COUNT, PTR_NULL);
				ENGINE_PTR(int, RASTERIZER_MODEL_SHADER_LOAD_NO_INVERSE_COUNT, K_RASTERIZER_MODEL_SHADER_LOAD_NO_INVERSE_COUNT, PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_ENVIRONMENT_NO_USAGE_ID_OFFSET_HOOK, K_RASTERIZER_MODEL_ENVIRONMENT_NO_USAGE_ID_OFFSET_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_ENVIRONMENT_NO_USAGE_ID_OFFSET_RETN, K_RASTERIZER_MODEL_ENVIRONMENT_NO_USAGE_ID_OFFSET_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_NO_USAGE_ID_OFFSET_HOOK, K_RASTERIZER_MODEL_NO_USAGE_ID_OFFSET_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_NO_USAGE_ID_OFFSET_RETN, K_RASTERIZER_MODEL_NO_USAGE_ID_OFFSET_RETN, FUNC_PTR_NULL);


				static void** K_PIXEL_SHADER_REFERENCES_ENVIRONMENT_NO[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_ENVIRONMENT_NO_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_ENVIRONMENT_NO_1),
				};
				static void** K_PIXEL_SHADER_REFERENCES_CHANGE_COLOR[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_CHANGE_COLOR_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_CHANGE_COLOR_1),
				};
				static void** K_PIXEL_SHADER_REFERENCES_MULTIPURPOSE[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_MULTIPURPOSE_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_MULTIPURPOSE_1),
				};
				static void** K_PIXEL_SHADER_REFERENCES_NO[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_NO_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_NO_1),
				};
				static void** K_PIXEL_SHADER_REFERENCES_REFLECTION[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_REFLECTION_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_REFLECTION_1),
				};
				static void** K_PIXEL_SHADER_REFERENCES_SELF_ILLUMINATION[] = {
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_SELF_ILLUMINATION_0),
					CAST_PTR(void**,K_PIXEL_SHADER_REFERENCES_SELF_ILLUMINATION_1),
				};

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_HOOK, K_RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_RETN, K_RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_RETN, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_INV_HOOK, K_RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_INV_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_INV_RETN, K_RASTERIZER_MODEL_PS_INDEX_ENVIRONMENT_NO_INV_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_HOOK, K_RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_RETN, K_RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_RETN, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_INV_HOOK, K_RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_INV_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_INV_RETN, K_RASTERIZER_MODEL_PS_INDEX_CHANGE_COLOR_INV_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_HOOK, K_RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_RETN, K_RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_RETN, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_INV_HOOK, K_RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_INV_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_INV_RETN, K_RASTERIZER_MODEL_PS_INDEX_MULTIPURPOSE_INV_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_NO_HOOK, K_RASTERIZER_MODEL_PS_INDEX_NO_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_NO_RETN, K_RASTERIZER_MODEL_PS_INDEX_NO_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_REFLECTION_HOOK, K_RASTERIZER_MODEL_PS_INDEX_REFLECTION_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_REFLECTION_RETN, K_RASTERIZER_MODEL_PS_INDEX_REFLECTION_RETN, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_REFLECTION_INV_HOOK, K_RASTERIZER_MODEL_PS_INDEX_REFLECTION_INV_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_REFLECTION_INV_RETN, K_RASTERIZER_MODEL_PS_INDEX_REFLECTION_INV_RETN, FUNC_PTR_NULL);

				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_HOOK, K_RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_RETN, K_RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_RETN, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_INV_HOOK, K_RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_INV_HOOK, FUNC_PTR_NULL);
				FUNC_PTR(RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_INV_RETN, K_RASTERIZER_MODEL_PS_INDEX_SELF_ILLUMINATION_INV_RETN, FUNC_PTR_NULL);
			}
		}
	}
}

/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Memory/1.10/Pointers/HaloCE_110_Runtime.Interface.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Runtime_Manual.Interface.inl"
#endif

#include <Memory/MemoryInterface.hpp>
#include <yelolib/memory/memory_interface_base.hpp>

namespace Yelo
{
	namespace Hud
	{
		#pragma region ShowCrosshair
		ENGINE_PTR(uint16, RENDER_CROSSHAIRS_DISABLE_MOD, K_RENDER_CROSSHAIRS_DISABLE_MOD, PTR_NULL);
		#pragma endregion

		#pragma region Scale
		FUNC_PTR(RENDER_WIDGET_RECURSIVE, K_RENDER_WIDGET_RECURSIVE, PTR_NULL);
		static void** K_RENDER_WIDGET_RECURSIVE_CALLS[] =
		{
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_0),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_1),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_2),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_3),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_4),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_5),
		};

		static void* K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALLS[] =
		{
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_0),
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_1),
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_2),
		};
		#pragma endregion

		#pragma region render nav points
		FUNC_PTR(HUD_RENDER_NAV_POINTS, K_HUD_RENDER_NAV_POINTS, PTR_NULL);
		FUNC_PTR(HUD_RENDER_NAV_POINTS_CALL, K_HUD_RENDER_NAV_POINTS_CALL, PTR_NULL);

		ENGINE_PTR(uint32, HUD_RENDER_NAV_POINT_ANCHOR_HALF_X, K_HUD_RENDER_NAV_POINT_ANCHOR_HALF_X, PTR_NULL);
		ENGINE_PTR(uint32, HUD_RENDER_NAV_POINT_ANCHOR_HALF_Y, K_HUD_RENDER_NAV_POINT_ANCHOR_HALF_Y, PTR_NULL);

		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_X, K_HUD_ANCHOR_SCREEN_X, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_Y, K_HUD_ANCHOR_SCREEN_Y, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_HALF_X, K_HUD_ANCHOR_SCREEN_HALF_X, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_HALF_Y, K_HUD_ANCHOR_SCREEN_HALF_Y, PTR_NULL);
		#pragma endregion

		#pragma region render team indicator
		FUNC_PTR(HUD_RENDER_PLAYERS, K_HUD_RENDER_PLAYERS, PTR_NULL);
		FUNC_PTR(HUD_RENDER_PLAYERS_CALL, K_HUD_RENDER_PLAYERS_CALL, PTR_NULL);
		#pragma endregion

		#pragma region render scoreboard
		FUNC_PTR(HUD_RENDER_SCOREBOARD_INGAME, K_HUD_RENDER_SCOREBOARD_INGAME, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_INGAME_CALL, K_HUD_RENDER_SCOREBOARD_INGAME_CALL, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_POSTGAME, K_HUD_RENDER_SCOREBOARD_POSTGAME, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_POSTGAME_CALL, K_HUD_RENDER_SCOREBOARD_POSTGAME_CALL, PTR_NULL);
		#pragma endregion

		#pragma region hud
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_WIDTH, K_HUD_POINT_ANCHOR_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HEIGHT, K_HUD_POINT_ANCHOR_HEIGHT, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HALF_WIDTH, K_HUD_POINT_ANCHOR_HALF_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HALF_HEIGHT, K_HUD_POINT_ANCHOR_HALF_HEIGHT, PTR_NULL);

		ENGINE_PTR(uint32, HUD_POINT_DAMAGE_ANCHOR_WIDTH, K_HUD_POINT_DAMAGE_ANCHOR_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_DAMAGE_ANCHOR_HEIGHT, K_HUD_POINT_DAMAGE_ANCHOR_HEIGHT, PTR_NULL);
		ENGINE_PTR(real, HUD_POINT_DAMAGE_ANCHOR_HALF_HEIGHT, K_HUD_POINT_DAMAGE_ANCHOR_HALF_HEIGHT, PTR_NULL);

		static void** K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTRS[] =
		{
			CAST_PTR(void**, K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTR_0),
			CAST_PTR(void**, K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTR_1),
		};
		#pragma endregion

		#pragma region multiplayer icons
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_CTF_X, K_HUD_MULTIPLAYER_ICON_CTF_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_CTF_Y, K_HUD_MULTIPLAYER_ICON_CTF_Y, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_KING_X, K_HUD_MULTIPLAYER_ICON_KING_X, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_ODDBALL_X, K_HUD_MULTIPLAYER_ICON_ODDBALL_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_ODDBALL_Y, K_HUD_MULTIPLAYER_ICON_ODDBALL_Y, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_RACE_X, K_HUD_MULTIPLAYER_ICON_RACE_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_RACE_Y, K_HUD_MULTIPLAYER_ICON_RACE_Y, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_SLAYER_X, K_HUD_MULTIPLAYER_ICON_SLAYER_X, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_BACKGROUND_X, K_HUD_MULTIPLAYER_ICON_BACKGROUND_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_BACKGROUND_Y, K_HUD_MULTIPLAYER_ICON_BACKGROUND_Y, PTR_NULL);
		#pragma endregion

		ENGINE_DPTR(void, hud_globals, K_HUD_GLOBALS, PTR_NULL);
	}
}

/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/

#if !PLATFORM_IS_DEDI
#include "Memory/1.10/Pointers/HaloCE_110_Runtime.Objects.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Runtime_Manual.Objects.inl"
#else
#include "Memory/1.10/Pointers/HaloCE_110_Dedi.Objects.inl"
#endif

//////////////////////////////////////////////////////////////////////////
// Objects.cpp
#if __EL_INCLUDE_FILE_ID == __EL_OBJECTS_OBJECTS
	ENGINE_PTR(s_object_type_definition**, object_type_definitions,				DUO_PTR(K_OBJECT_TYPE_DEFINITIONS));
	ENGINE_PTR(s_widget_type_definition*,  widget_type_definitions,				DUO_PTR(K_WIDGET_TYPE_DEFINITIONS));

	ENGINE_DPTR(widget_data_t, widgets,											DUO_PTR(K_WIDGETS));
	ENGINE_DPTR(flag_data_t, flags,												DUO_PTR(K_FLAGS));
	ENGINE_DPTR(antenna_data_t, antennas,										DUO_PTR(K_ANTENNAS));
	ENGINE_DPTR(glow_data_t, glow,												DUO_PTR(K_GLOW));
	ENGINE_DPTR(glow_particles_data_t, glow_particles,							DUO_PTR(K_GLOW_PARTICLES));
	ENGINE_DPTR(light_volumes_data_t, light_volumes,							DUO_PTR(K_LIGHT_VOLUMES));
	ENGINE_DPTR(lightnings_data_t, lightnings,									DUO_PTR(K_LIGHTNINGS));

	ENGINE_DPTR(Render::cached_object_render_states_data_t, cached_object_render_states,	DUO_PTR(K_CACHED_OBJECT_RENDER_STATES));
	ENGINE_DPTR(s_unit_globals_data, unit_globals,											DUO_PTR(K_UNIT_GLOBALS));
	ENGINE_DPTR(device_groups_data_t, device_groups,										DUO_PTR(K_DEVICE_GROUPS));
	ENGINE_DPTR(object_header_data_t, object_header,										DUO_PTR(K_OBJECT_HEADER));
	ENGINE_DPTR(s_objects_pool_data, objects_pool,											DUO_PTR(K_OBJECTS_POOL));
	ENGINE_DPTR(s_object_globals_data, object_globals,										DUO_PTR(K_OBJECT_GLOBALS));
	ENGINE_DPTR(s_object_name_list_data, object_name_list,									DUO_PTR(K_OBJECT_NAME_LIST));

	ENGINE_DPTR(collideable_object_data, collideable_object,												DUO_PTR(K_COLLIDEABLE_OBJECT));
	ENGINE_DPTR(cluster_collideable_object_reference_data_t, cluster_collideable_object_reference,			DUO_PTR(K_CLUSTER_COLLIDEABLE_OBJECT_REFERENCE));
	ENGINE_DPTR(collideable_object_cluster_reference_data_t, collideable_object_cluster_reference,			DUO_PTR(K_COLLIDEABLE_OBJECT_CLUSTER_REFERENCE));
	ENGINE_DPTR(noncollideable_object_data, noncollideable_object,											DUO_PTR(K_NONCOLLIDEABLE_OBJECT));
	ENGINE_DPTR(cluster_noncollideable_object_reference_data_t, cluster_noncollideable_object_reference,	DUO_PTR(K_CLUSTER_NONCOLLIDEABLE_OBJECT_REFERENCE));
	ENGINE_DPTR(noncollideable_object_cluster_reference_data_t, noncollideable_object_cluster_reference,	DUO_PTR(K_NONCOLLIDEABLE_OBJECT_CLUSTER_REFERENCE));

	ENGINE_PTR(size_t, object_memory_pool_allocation_size,													DUO_PTR(K_OBJECT_MEMORY_POOL_ALLOCATION_SIZE));

	FUNC_PTR(OBJECT_TYPES_PLACE_ALL_MOD_VEHI_REMAP,		DUO_PTR(K_OBJECT_TYPES_PLACE_ALL_MOD_VEHI_REMAP));
	FUNC_PTR(OBJECTS_UPDATE__OBJECT_IN_PLAYER_PVS_NOP1,	K_OBJECTS_UPDATE__OBJECT_IN_PLAYER_PVS_NOP1, PTR_NULL);
	FUNC_PTR(OBJECTS_UPDATE__OBJECT_IN_PLAYER_PVS_NOP2,	K_OBJECTS_UPDATE__OBJECT_IN_PLAYER_PVS_NOP2, PTR_NULL);
	FUNC_PTR(OBJECTS_UPDATE_CALL,						DUO_PTR(K_OBJECTS_UPDATE_CALL));
	FUNC_PTR(OBJECTS_UPDATE_HOOK,						DUO_PTR(K_OBJECTS_UPDATE_HOOK));
	FUNC_PTR(OBJECTS_GARBAGE_COLLECTION,				DUO_PTR(K_OBJECTS_GARBAGE_COLLECTION));
	FUNC_PTR(OBJECT_DAMAGE_OBJECT_BODY_HOOK,			DUO_PTR(K_OBJECT_DAMAGE_OBJECT_BODY_HOOK));
	FUNC_PTR(BIPED_UPDATE_MOVING_HOOK,					DUO_PTR(K_BIPED_UPDATE_MOVING_HOOK));
	FUNC_PTR(BIPED_JUMP_MOD_STUN_PENALTY_FIELD_REF,		DUO_PTR(K_BIPED_JUMP_MOD_STUN_PENALTY_FIELD_REF));
	FUNC_PTR(OBJECT_DEPLETE_BODY_KILL_CHILD_HOOK,		DUO_PTR(K_OBJECT_DEPLETE_BODY_KILL_CHILD_HOOK));
	FUNC_PTR(OBJECT_DEPLETE_BODY_KILL_CHILD_RETN,		DUO_PTR(K_OBJECT_DEPLETE_BODY_KILL_CHILD_RETN));

	static const uintptr_t OBJECT_DAMAGE_AFTERMATH__CALC_ACCEL_HOOK =			K_OBJECT_DAMAGE_AFTERMATH__CALC_ACCEL_HOOK;
	static const uintptr_t OBJECT_DAMAGE_AFTERMATH__CALC_ACCEL_HOOK_RETURN =	K_OBJECT_DAMAGE_AFTERMATH__CALC_ACCEL_HOOK_RETURN;

	static const uintptr_t OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK =					K_OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK;
	static const uintptr_t OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK_RETURN =			K_OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK_RETURN;
	static const uintptr_t OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK_RETURN_INVALID =	K_OBJECT_DAMAGE_AFTERMATH__UNIT_VALIDATE_INST_ACCEL_HOOK_RETURN_INVALID;

#if PLATFORM_IS_USER
	namespace render_objects_mods
	{
		static uintptr_t K_MAXIMUM_RENDERED_OBJECTS_REFS_32bit[] = {
			K_MAXIMUM_RENDERED_OBJECTS_REF_32BIT_0,
			K_MAXIMUM_RENDERED_OBJECTS_REF_32BIT_1,
		};
		static uintptr_t K_MAXIMUM_RENDERED_OBJECTS_REFS_16bit[] = {
			K_MAXIMUM_RENDERED_OBJECTS_REF_16BIT_0,
		};
		static uintptr_t K_RENDER_OBJECT_GLOBALS__RENDERED_OBJECTS_REFS[] = {
			K_RENDER_OBJECT_GLOBALS__RENDERED_OBJECTS_REF_0,
			K_RENDER_OBJECT_GLOBALS__RENDERED_OBJECTS_REF_1,
			K_RENDER_OBJECT_GLOBALS__RENDERED_OBJECTS_REF_2,
			K_RENDER_OBJECT_GLOBALS__RENDERED_OBJECTS_REF_3,
		};
		
		FUNC_PTR(OBJECT_NEW_SET_SHADOW_FLAG_HOOK,						K_OBJECT_NEW_SET_SHADOW_FLAG_HOOK, PTR_NULL);
		FUNC_PTR(OBJECT_NEW_SET_SHADOW_FLAG_RETN,						K_OBJECT_NEW_SET_SHADOW_FLAG_RETN, PTR_NULL);
		static void* K_OBJECT_DISABLE_SHADOW_CAST_OVERRIDES[] = {
			CAST_PTR(void*,K_OBJECT_DISABLE_SHADOW_CAST_OVERRIDE_0),
			CAST_PTR(void*,K_OBJECT_DISABLE_SHADOW_CAST_OVERRIDE_1),
			CAST_PTR(void*,K_OBJECT_DISABLE_SHADOW_CAST_OVERRIDE_2),
		};
	};
#endif

	namespace Weapon
	{
		FUNC_PTR(FIRST_PERSON_WEAPON_RENDER_UPDATE,							K_FIRST_PERSON_WEAPON_RENDER_UPDATE, FUNC_PTR_NULL);
		FUNC_PTR(RENDER_WINDOW_CALL_HOOK_FIRST_PERSON_WEAPON_RENDER_UPDATE,	K_RENDER_WINDOW_CALL_HOOK_FIRST_PERSON_WEAPON_RENDER_UPDATE, FUNC_PTR_NULL);
	};


//////////////////////////////////////////////////////////////////////////
// Equipment.cpp
#elif __EL_INCLUDE_FILE_ID == __EL_OBJECTS_EQUIPMENT


//////////////////////////////////////////////////////////////////////////
// Units.cpp
#elif __EL_INCLUDE_FILE_ID == __EL_OBJECTS_UNITS

	static uint32 K_UNIT_ZOOM_LEVEL_OFFSET_REFS[] = {
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_0,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_1,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_2,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_3,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_4,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_5,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_6,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_7,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_8,
		K_UNIT_ZOOM_LEVEL_OFFSET_REF_9,
	};
	static uint32 K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REFS[] = {
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_0,
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_1,
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_2,
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_3,
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_4,
		K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_5,
	};

	static uint32 K_NUMBER_OF_UNIT_GRENADE_TYPES_REFS[] = {
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_0,
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_1,
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_2,
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_3,
#if PLATFORM_IS_USER
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_4,
#endif
		K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_5,
	};
	static uint32 K_MAXIMUM_UNIT_GRENADE_INDEX_REFS[] = {
		K_MAXIMUM_UNIT_GRENADE_INDEX_REF_0,
		K_MAXIMUM_UNIT_GRENADE_INDEX_REF_1,
		K_MAXIMUM_UNIT_GRENADE_INDEX_REF_2,
	};

	FUNC_PTR(ACTOR_DIED_UNIT_GRENADE_COUNT_MOD,					DUO_PTR(K_ACTOR_DIED_UNIT_GRENADE_COUNT_MOD));
	FUNC_PTR(PLAYER_ADD_EQUIPMENT_UNIT_GRENADE_COUNT_MOD,		DUO_PTR(K_PLAYER_ADD_EQUIPMENT_UNIT_GRENADE_COUNT_MOD));
	FUNC_PTR(BIPED_NEW_FROM_NETWORK_UNIT_GRENADE_COUNT_MOD,		DUO_PTR(K_BIPED_NEW_FROM_NETWORK_UNIT_GRENADE_COUNT_MOD));
	FUNC_PTR(BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD1,		DUO_PTR(K_BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD1));
	FUNC_PTR(BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD2,		DUO_PTR(K_BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD2));
	FUNC_PTR(BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD1,	DUO_PTR(K_BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD1));
	FUNC_PTR(BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD2,	DUO_PTR(K_BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD2));
	FUNC_PTR(BIPED_PROCESS_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD,	DUO_PTR(K_BIPED_PROCESS_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD));
	FUNC_PTR(BIPED_UPDATE_CHECK_PARENT_UNIT_TYPE,				DUO_PTR(K_BIPED_UPDATE_CHECK_PARENT_UNIT_TYPE));
	FUNC_PTR(UNIT_DAMAGE_AFTERMATH_CALL,						DUO_PTR(K_UNIT_DAMAGE_AFTERMATH_CALL));

	//////////////////////////////////////////////////////////////////////////
	// Units.SeatBoarding
	FUNC_PTR(UNIT_CAN_ENTER_SEAT_HOOK,							DUO_PTR(K_UNIT_CAN_ENTER_SEAT_HOOK));

	//////////////////////////////////////////////////////////////////////////
	// Units.SeatDamage
	FUNC_PTR(BIPED_SEATED_MELEE_HOOK,							DUO_PTR(K_BIPED_SEATED_MELEE_HOOK));
	FUNC_PTR(BIPED_SEATED_MELEE_RETN,							DUO_PTR(K_BIPED_SEATED_MELEE_RETN));
	FUNC_PTR(UNIT_THROW_GRENADE_RELEASE_HOOK,					DUO_PTR(K_UNIT_THROW_GRENADE_RELEASE_HOOK));
	FUNC_PTR(WEAPON_PREVENTS_GRENADE_THROWING_HOOK,				DUO_PTR(K_WEAPON_PREVENTS_GRENADE_THROWING_HOOK));
	FUNC_PTR(WEAPON_PREVENTS_GRENADE_THROWING_RETN,				DUO_PTR(K_WEAPON_PREVENTS_GRENADE_THROWING_RETN));

	//////////////////////////////////////////////////////////////////////////
	// Units.Animations
	FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_HOOK,				DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_HOOK));
	FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_STOCK_RETN,		DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_STOCK_RETN));
	FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_SKIP_RETN,		DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_SKIP_RETN));
	
	FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_HOOK,				DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_HOOK));
	FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_STOCK_RETN,			DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_STOCK_RETN));
	FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_SKIP_RETN,			DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_SKIP_RETN));

	static void** K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALLS[] = {
		CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_0),
		CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_1),
		CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_2),
	};
	static void** K_UNIT_ANIMATION_BUSY_CALLS[] = {
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_0),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_1),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_2),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_3),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_4),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_5),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_6),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_7),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_8),
		CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_9),
	};
	FUNC_PTR(UNIT_ANIMATION_STATE_LOOPS_CALL,		DUO_PTR(K_UNIT_ANIMATION_STATE_LOOPS_CALL));
	FUNC_PTR(UNIT_ANIMATION_WEAPON_IK_CALL,			DUO_PTR(K_UNIT_ANIMATION_WEAPON_IK_CALL));
	FUNC_PTR(UNIT_ANIMATION_VEHICLE_IK_CALL,		DUO_PTR(K_UNIT_ANIMATION_VEHICLE_IK_CALL));

#else
	#error Undefined engine layout include for: __EL_INCLUDE_OBJECTS
#endif
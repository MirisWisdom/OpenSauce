/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Memory/1.10/Pointers/HaloCE_110_Runtime.Game.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Runtime_Manual.Game.inl"
#else
#include "Memory/1.10/Pointers/HaloCE_110_Dedi.Game.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Dedi_Manual.Game.inl"
#endif

#include <blamlib/effects/player_effects.hpp>
#include <blamlib/game/game_engine_oddball.hpp>
#include <blamlib/game/player_control.hpp>
#include <Memory/MemoryInterface.hpp>
#include <yelolib/memory/memory_interface_base.hpp>

namespace Yelo
{
	namespace Players
	{
		ENGINE_DPTR(players_data_t, players, DUO_PTR(K_PLAYERS));
		ENGINE_DPTR(teams_data_t, teams, DUO_PTR(K_TEAMS));
		ENGINE_DPTR(s_players_globals_data, players_globals, DUO_PTR(K_PLAYERS_GLOBALS));
		ENGINE_DPTR(s_player_control_globals_data, player_control_globals, DUO_PTR(K_PLAYER_CONTROL_GLOBALS));
		ENGINE_DPTR(s_player_effects_data, player_effects, DUO_PTR(K_PLAYER_EFFECTS));
		ENGINE_PTR(datum_index, machine_to_player_table, DUO_PTR(K_MACHINE_TO_PLAYER_TABLE));

		FUNC_PTR(PLAYER_SPAWN__CREATE_UNIT_MP_HOOK, DUO_PTR(K_PLAYER_SPAWN__CREATE_UNIT_MP_HOOK));
		FUNC_PTR(PLAYER_SPAWN__CREATE_UNIT_MP_HOOK_RETN, DUO_PTR(K_PLAYER_SPAWN__CREATE_UNIT_MP_HOOK_RETN));

		FUNC_PTR(PLAYERS_UPDATE_BEFORE_GAME_SERVER_HOOK, DUO_PTR(K_PLAYERS_UPDATE_BEFORE_GAME_SERVER_HOOK));
		FUNC_PTR(PLAYERS_UPDATE_BEFORE_GAME_CLIENT_HOOK, DUO_PTR(K_PLAYERS_UPDATE_BEFORE_GAME_CLIENT_HOOK));
		FUNC_PTR(PLAYERS_UPDATE_AFTER_GAME_HOOK, DUO_PTR(K_PLAYERS_UPDATE_AFTER_GAME_HOOK));

		//////////////////////////////////////////////////////////////////////////
		// Players.NearbyObjects
		FUNC_PTR(PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_JMP_TABLE_RETN, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_JMP_TABLE_RETN));
		ENGINE_PTR(void**, player_examine_nearby_objects_server_jmp_ptr, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_JMP_PTR));
		ENGINE_PTR(byte, PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_LAST_ENTRY_TYPE, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_LAST_ENTRY_TYPE));
		ENGINE_PTR(void**, PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_JMP_TABLE, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_SERVER_JMP_TABLE));

		FUNC_PTR(PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_JMP_TABLE_RETN, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_JMP_TABLE_RETN));
		ENGINE_PTR(void**, player_examine_nearby_objects_client_jmp_ptr, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_JMP_PTR));
		ENGINE_PTR(byte, PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_LAST_ENTRY_TYPE, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_LAST_ENTRY_TYPE));
		ENGINE_PTR(void**, PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_JMP_TABLE, DUO_PTR(K_PLAYER_EXAMINE_NEARBY_OBJECTS_CLIENT_JMP_TABLE));

		//////////////////////////////////////////////////////////////////////////
		// Players.ActionResults
		FUNC_PTR(PLAYER_HANDLE_ACTION_JMP_TABLE_ADJUST_SIZE, DUO_PTR(K_PLAYER_HANDLE_ACTION_JMP_TABLE_ADJUST_SIZE));
		FUNC_PTR(PLAYER_HANDLE_ACTION_JMP_TABLE_RETN, DUO_PTR(K_PLAYER_HANDLE_ACTION_JMP_TABLE_RETN));
		ENGINE_PTR(byte, PLAYER_HANDLE_ACTION_LAST_ENTRY_TYPE, DUO_PTR(K_PLAYER_HANDLE_ACTION_LAST_ENTRY_TYPE));
		ENGINE_PTR(void**, player_handle_action_jmp_ptr, DUO_PTR(K_PLAYER_HANDLE_ACTION_JMP_PTR));
		ENGINE_PTR(void**, PLAYER_HANDLE_ACTION_JMP_TABLE, DUO_PTR(K_PLAYER_HANDLE_ACTION_JMP_TABLE));

		FUNC_PTR(FOLLOWING_CAMERA_GET_UNIT_CAMERA_INFO_CALL, K_FOLLOWING_CAMERA_GET_UNIT_CAMERA_INFO_CALL, FUNC_PTR_NULL);
	}
}

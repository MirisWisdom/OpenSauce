/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/

#if !PLATFORM_IS_DEDI
#include "Memory/1.10/Pointers/HaloCE_110_Runtime.Interface.inl"
#include "Memory/1.10/Pointers/HaloCE_110_Runtime_Manual.Interface.inl"
#endif

//////////////////////////////////////////////////////////////////////////
// Controls.cpp
#if __EL_INCLUDE_FILE_ID == __EL_INTERFACE_CONTROLS
	FUNC_PTR(INPUT_UPDATE_HOOK,						K_INPUT_UPDATE_HOOK, FUNC_PTR_NULL);

	ENGINE_PTR(ControlSettings, Settings,			K_SETTINGS, PTR_NULL);
	ENGINE_PTR(ControlStates, ControlState,			K_CONTROL_STATE, PTR_NULL);
	ENGINE_PTR(PositionState, MousePositionState,	K_MOUSE_POSITION_STATE, PTR_NULL);
	ENGINE_PTR(byte, InputStateFlags,				K_INPUT_STATE_FLAGS, PTR_NULL);

#pragma region GameUI
//////////////////////////////////////////////////////////////////////////
// GameUI.cpp
#elif __EL_INCLUDE_FILE_ID == __EL_INTERFACE_GAME_UI
	namespace GameUI
	{
		ENGINE_DPTR(s_hud_scripted_globals, hud_scripted_globals,	K_HUD_SCRIPTED_GLOBALS, PTR_NULL);
		ENGINE_DPTR(s_hud_messaging, hud_messaging,					K_HUD_MESSAGING, PTR_NULL);
		ENGINE_DPTR(s_hud_unit_interface, hud_unit_interface,		K_HUD_UNIT_INTERFACE, PTR_NULL);
		ENGINE_DPTR(s_hud_weapon_interface, hud_weapon_interface,	K_HUD_WEAPON_INTERFACE, PTR_NULL);
		ENGINE_DPTR(s_hud_nav_points, hud_nav_points,				K_HUD_NAV_POINTS, PTR_NULL);
		ENGINE_DPTR(s_motion_sensor, motion_sensor,					K_MOTION_SENSOR, PTR_NULL);
		ENGINE_DPTR(s_first_person_weapons, first_person_weapons,	K_FIRST_PERSON_WEAPONS, PTR_NULL);

		ENGINE_PTR(s_text_bounds_globals_data, text_bounds_globals,	K_TEXT_BOUNDS_GLOBALS, PTR_NULL);
		ENGINE_PTR(s_font_drawing_globals_data, font_drawing_globals,K_FONT_DRAWING_GLOBALS,PTR_NULL);

		ENGINE_PTR(s_hud_chat_globals, hud_chat_globals,			K_HUD_CHAT_GLOBALS, PTR_NULL);
		ENGINE_PTR(int32, hud_chat_line_count,						K_HUD_CHAT_LINE_COUNT, PTR_NULL);

		FUNC_PTR(HUD_UPDATE,										K_HUD_UPDATE, FUNC_PTR_NULL);
		FUNC_PTR(HUD_UPDATE_CALL,									K_HUD_UPDATE_CALL, FUNC_PTR_NULL);
		FUNC_PTR(FIRST_PERSON_WEAPONS_UPDATE,						K_FIRST_PERSON_WEAPONS_UPDATE, FUNC_PTR_NULL);
		FUNC_PTR(FIRST_PERSON_WEAPONS_UPDATE_CALL,					K_FIRST_PERSON_WEAPONS_UPDATE_CALL, FUNC_PTR_NULL);

		FUNC_PTR(FIRST_PERSON_WEAPON_SET_STATE_HOOK,				K_FIRST_PERSON_WEAPON_SET_STATE_HOOK, FUNC_PTR_NULL);
	};

	namespace Hud
	{
		#pragma region ShowCrosshair
		ENGINE_PTR(uint16, RENDER_CROSSHAIRS_DISABLE_MOD,			K_RENDER_CROSSHAIRS_DISABLE_MOD, PTR_NULL);
		#pragma endregion

		#pragma region Scale
		FUNC_PTR(RENDER_WIDGET_RECURSIVE,							K_RENDER_WIDGET_RECURSIVE, PTR_NULL);
		static void** K_RENDER_WIDGET_RECURSIVE_CALLS[] =
		{
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_0),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_1),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_2),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_3),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_4),
			CAST_PTR(void**, K_RENDER_WIDGET_RECURSIVE_CALL_5),
		};

		static void* K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALLS[] =
		{ 
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_0),
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_1),
			CAST_PTR(void*, K_RASTERIZER_RENDER_UI_SET_SCREENPROJ_CALL_2),
		};
		#pragma endregion

		#pragma region render nav points
		FUNC_PTR(HUD_RENDER_NAV_POINTS,								K_HUD_RENDER_NAV_POINTS, PTR_NULL);
		FUNC_PTR(HUD_RENDER_NAV_POINTS_CALL,						K_HUD_RENDER_NAV_POINTS_CALL, PTR_NULL);

		ENGINE_PTR(uint32, HUD_RENDER_NAV_POINT_ANCHOR_HALF_X,		K_HUD_RENDER_NAV_POINT_ANCHOR_HALF_X, PTR_NULL);
		ENGINE_PTR(uint32, HUD_RENDER_NAV_POINT_ANCHOR_HALF_Y,		K_HUD_RENDER_NAV_POINT_ANCHOR_HALF_Y, PTR_NULL);

		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_X,						K_HUD_ANCHOR_SCREEN_X, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_Y,						K_HUD_ANCHOR_SCREEN_Y, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_HALF_X,					K_HUD_ANCHOR_SCREEN_HALF_X, PTR_NULL);
		ENGINE_PTR(real, HUD_ANCHOR_SCREEN_HALF_Y,					K_HUD_ANCHOR_SCREEN_HALF_Y, PTR_NULL);
		#pragma endregion

		#pragma region render team indicator
		FUNC_PTR(HUD_RENDER_PLAYERS,								K_HUD_RENDER_PLAYERS, PTR_NULL);
		FUNC_PTR(HUD_RENDER_PLAYERS_CALL,							K_HUD_RENDER_PLAYERS_CALL, PTR_NULL);
		#pragma endregion

		#pragma region render scoreboard
		FUNC_PTR(HUD_RENDER_SCOREBOARD_INGAME,						K_HUD_RENDER_SCOREBOARD_INGAME, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_INGAME_CALL,					K_HUD_RENDER_SCOREBOARD_INGAME_CALL, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_POSTGAME,					K_HUD_RENDER_SCOREBOARD_POSTGAME, PTR_NULL);
		FUNC_PTR(HUD_RENDER_SCOREBOARD_POSTGAME_CALL,				K_HUD_RENDER_SCOREBOARD_POSTGAME_CALL, PTR_NULL);
		#pragma endregion

		#pragma region hud
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_WIDTH,					K_HUD_POINT_ANCHOR_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HEIGHT,					K_HUD_POINT_ANCHOR_HEIGHT, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HALF_WIDTH,				K_HUD_POINT_ANCHOR_HALF_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_ANCHOR_HALF_HEIGHT,			K_HUD_POINT_ANCHOR_HALF_HEIGHT, PTR_NULL);

		ENGINE_PTR(uint32, HUD_POINT_DAMAGE_ANCHOR_WIDTH,			K_HUD_POINT_DAMAGE_ANCHOR_WIDTH, PTR_NULL);
		ENGINE_PTR(uint32, HUD_POINT_DAMAGE_ANCHOR_HEIGHT,			K_HUD_POINT_DAMAGE_ANCHOR_HEIGHT, PTR_NULL);
		ENGINE_PTR(real, HUD_POINT_DAMAGE_ANCHOR_HALF_HEIGHT,		K_HUD_POINT_DAMAGE_ANCHOR_HALF_HEIGHT, PTR_NULL);

		static void** K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTRS[] =
		{
			CAST_PTR(void**, K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTR_0),
			CAST_PTR(void**, K_HUD_POINT_DAMAGE_ANCHOR_HALF_WIDTH_PTR_1),
		};
		#pragma endregion

		#pragma region multiplayer icons
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_CTF_X,				K_HUD_MULTIPLAYER_ICON_CTF_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_CTF_Y,				K_HUD_MULTIPLAYER_ICON_CTF_Y, PTR_NULL);
		
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_KING_X,				K_HUD_MULTIPLAYER_ICON_KING_X, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_ODDBALL_X,			K_HUD_MULTIPLAYER_ICON_ODDBALL_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_ODDBALL_Y,			K_HUD_MULTIPLAYER_ICON_ODDBALL_Y, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_RACE_X,				K_HUD_MULTIPLAYER_ICON_RACE_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_RACE_Y,				K_HUD_MULTIPLAYER_ICON_RACE_Y, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_SLAYER_X,			K_HUD_MULTIPLAYER_ICON_SLAYER_X, PTR_NULL);

		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_BACKGROUND_X,		K_HUD_MULTIPLAYER_ICON_BACKGROUND_X, PTR_NULL);
		ENGINE_PTR(uint16, HUD_MULTIPLAYER_ICON_BACKGROUND_Y,		K_HUD_MULTIPLAYER_ICON_BACKGROUND_Y, PTR_NULL);
		#pragma endregion

		ENGINE_DPTR(void, hud_globals,								K_HUD_GLOBALS, PTR_NULL);
	};
#pragma endregion

//////////////////////////////////////////////////////////////////////////
// Keystone.cpp
#elif __EL_INCLUDE_FILE_ID == __EL_INTERFACE_KEYSTONE
	FUNC_PTR(KEYSTONE_CHATLOG_ADD_ITEM_SEND_MESSAGE, K_KEYSTONE_CHATLOG_ADD_ITEM_SEND_MESSAGE, FUNC_PTR_NULL);

	ENGINE_PTR(wchar_t, ChatLogName,		K_CHAT_LOG_NAME, PTR_NULL);
	ENGINE_PTR(void**, MainWindow,			K_MAIN_WINDOW, PTR_NULL);

	FUNC_PTR(KS_TRANSLATEACCELERATOR_CALL,	K_KS_TRANSLATEACCELERATOR_CALL, FUNC_PTR_NULL);
	FUNC_PTR(KS_TRANSLATEACCELERATOR,		K_KS_TRANSLATEACCELERATOR, FUNC_PTR_NULL);
	FUNC_PTR(KS_GETWINDOW,					K_KS_GETWINDOW, FUNC_PTR_NULL);
	FUNC_PTR(KW_RELEASE,					K_KW_RELEASE, FUNC_PTR_NULL);
	FUNC_PTR(KW_GETCONTROLBYID,				K_KW_GETCONTROLBYID, FUNC_PTR_NULL);
	FUNC_PTR(KC_SENDMESSAGE,				K_KC_SENDMESSAGE, FUNC_PTR_NULL);

//////////////////////////////////////////////////////////////////////////
// UIWidget.cpp
#elif __EL_INCLUDE_FILE_ID == __EL_INTERFACE_UI_WIDGET
	FUNC_PTR(UI_WIDGET_LOAD_BY_NAME_OR_TAG,		K_UI_WIDGET_LOAD_BY_NAME_OR_TAG, FUNC_PTR_NULL);

#else
	#error Undefined engine layout include for: __EL_INCLUDE_INTERFACE
#endif
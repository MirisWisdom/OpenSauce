/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Pointers/1.10/HaloCE_110_Runtime.Rasterizer.DX9.inl"
#include "Pointers/1.10/HaloCE_110_Runtime_Manual.Rasterizer.DX9.inl"
#endif

#include <Memory/MemoryInterface.hpp>
#include <yelolib/memory/memory_interface_base.hpp>

namespace Yelo
{
	namespace Rasterizer
	{
		namespace DeviceHooks
		{
			FUNC_PTR(RASTERIZER_D3D_CREATE_DEVICE_HOOK, K_RASTERIZER_D3D_CREATE_DEVICE_HOOK, FUNC_PTR_NULL);
			FUNC_PTR(RASTERIZER_D3D_CREATE_DEVICE_RETN, K_RASTERIZER_D3D_CREATE_DEVICE_RETN, FUNC_PTR_NULL);
			FUNC_PTR(RASTERIZER_D3D_RESET_DEVICE_HOOK, K_RASTERIZER_D3D_RESET_DEVICE_HOOK, FUNC_PTR_NULL);
			FUNC_PTR(RASTERIZER_D3D_BEGIN_SCENE_CALL, K_RASTERIZER_D3D_BEGIN_SCENE_CALL, FUNC_PTR_NULL);
			FUNC_PTR(RASTERIZER_D3D_END_SCENE_CALL, K_RASTERIZER_D3D_END_SCENE_CALL, FUNC_PTR_NULL);

			FUNC_PTR(RASTERIZER_SET_WORLD_VIEW_PROJECTION_MATRIX_VERTEX_CONSTANT_CALL, K_RASTERIZER_SET_WORLD_VIEW_PROJECTION_MATRIX_VERTEX_CONSTANT_CALL, FUNC_PTR_NULL);
			FUNC_PTR(RASTERIZER_SET_MODEL_TEX_SCALE_VERTEX_CONSTANT_CALL, K_RASTERIZER_SET_MODEL_TEX_SCALE_VERTEX_CONSTANT_CALL, FUNC_PTR_NULL);

			static void** K_RASTERIZER_SET_MODEL_SPEC_COLOR_VERTEX_CONSTANT_CALLS[] = {
				CAST_PTR(void**, K_RASTERIZER_SET_MODEL_SPEC_COLOR_VERTEX_CONSTANT_CALL_0),
				CAST_PTR(void**, K_RASTERIZER_SET_MODEL_SPEC_COLOR_VERTEX_CONSTANT_CALL_1),
			};
			FUNC_PTR(RASTERIZER_SET_MODEL_VERTEX_LIGHT_VERTEX_CONSTANT_CALL, K_RASTERIZER_SET_MODEL_VERTEX_LIGHT_VERTEX_CONSTANT_CALL, FUNC_PTR_NULL);
		}
	}
}

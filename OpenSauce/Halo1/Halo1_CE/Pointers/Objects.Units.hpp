/*
	Yelo: Open Sauce SDK
		Halo 1 (CE) Edition

	See license\OpenSauce\Halo1_CE for specific license information
*/
#pragma once

#if !PLATFORM_IS_DEDI
#include "Pointers/1.10/HaloCE_110_Runtime.Objects.inl"
#include "Pointers/1.10/HaloCE_110_Runtime_Manual.Objects.inl"
#else
#include "Pointers/1.10/HaloCE_110_Dedi.Objects.inl"
#endif

#include <Memory/MemoryInterface.hpp>
#include <yelolib/memory/memory_interface_base.hpp>

namespace Yelo
{
	namespace Objects
	{
		namespace Units
		{
			static uint32 K_UNIT_ZOOM_LEVEL_OFFSET_REFS[] = {
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_0,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_1,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_2,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_3,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_4,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_5,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_6,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_7,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_8,
				K_UNIT_ZOOM_LEVEL_OFFSET_REF_9,
			};
			static uint32 K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REFS[] = {
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_0,
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_1,
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_2,
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_3,
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_4,
				K_UNIT_DESIRED_ZOOM_LEVEL_OFFSET_REF_5,
			};

			static uint32 K_NUMBER_OF_UNIT_GRENADE_TYPES_REFS[] = {
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_0,
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_1,
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_2,
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_3,
				#if PLATFORM_IS_USER
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_4,
				#endif
				K_NUMBER_OF_UNIT_GRENADE_TYPES_REF_5,
			};
			static uint32 K_MAXIMUM_UNIT_GRENADE_INDEX_REFS[] = {
				K_MAXIMUM_UNIT_GRENADE_INDEX_REF_0,
				K_MAXIMUM_UNIT_GRENADE_INDEX_REF_1,
				K_MAXIMUM_UNIT_GRENADE_INDEX_REF_2,
			};

			FUNC_PTR(ACTOR_DIED_UNIT_GRENADE_COUNT_MOD, DUO_PTR(K_ACTOR_DIED_UNIT_GRENADE_COUNT_MOD));
			FUNC_PTR(PLAYER_ADD_EQUIPMENT_UNIT_GRENADE_COUNT_MOD, DUO_PTR(K_PLAYER_ADD_EQUIPMENT_UNIT_GRENADE_COUNT_MOD));
			FUNC_PTR(BIPED_NEW_FROM_NETWORK_UNIT_GRENADE_COUNT_MOD, DUO_PTR(K_BIPED_NEW_FROM_NETWORK_UNIT_GRENADE_COUNT_MOD));
			FUNC_PTR(BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD1, DUO_PTR(K_BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD1));
			FUNC_PTR(BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD2, DUO_PTR(K_BIPED_UPDATE_BASELINE_UNIT_GRENADE_COUNT_MOD2));
			FUNC_PTR(BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD1, DUO_PTR(K_BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD1));
			FUNC_PTR(BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD2, DUO_PTR(K_BIPED_BUILD_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD2));
			FUNC_PTR(BIPED_PROCESS_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD, DUO_PTR(K_BIPED_PROCESS_UPDATE_DELTA_UNIT_GRENADE_COUNT_MOD));
			FUNC_PTR(BIPED_UPDATE_CHECK_PARENT_UNIT_TYPE, DUO_PTR(K_BIPED_UPDATE_CHECK_PARENT_UNIT_TYPE));
			FUNC_PTR(UNIT_DAMAGE_AFTERMATH_CALL, DUO_PTR(K_UNIT_DAMAGE_AFTERMATH_CALL));

			//////////////////////////////////////////////////////////////////////////
			// Units.SeatBoarding
			FUNC_PTR(UNIT_CAN_ENTER_SEAT_HOOK, DUO_PTR(K_UNIT_CAN_ENTER_SEAT_HOOK));

			//////////////////////////////////////////////////////////////////////////
			// Units.SeatDamage
			FUNC_PTR(BIPED_SEATED_MELEE_HOOK, DUO_PTR(K_BIPED_SEATED_MELEE_HOOK));
			FUNC_PTR(BIPED_SEATED_MELEE_RETN, DUO_PTR(K_BIPED_SEATED_MELEE_RETN));
			FUNC_PTR(UNIT_THROW_GRENADE_RELEASE_HOOK, DUO_PTR(K_UNIT_THROW_GRENADE_RELEASE_HOOK));
			FUNC_PTR(WEAPON_PREVENTS_GRENADE_THROWING_HOOK, DUO_PTR(K_WEAPON_PREVENTS_GRENADE_THROWING_HOOK));
			FUNC_PTR(WEAPON_PREVENTS_GRENADE_THROWING_RETN, DUO_PTR(K_WEAPON_PREVENTS_GRENADE_THROWING_RETN));

			//////////////////////////////////////////////////////////////////////////
			// Units.Animations
			FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_HOOK, DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_HOOK));
			FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_STOCK_RETN, DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_STOCK_RETN));
			FUNC_PTR(ANIMATION_STATE_DEFINED_KEYFRAME_SKIP_RETN, DUO_PTR(K_ANIMATION_STATE_DEFINED_KEYFRAME_SKIP_RETN));

			FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_HOOK, DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_HOOK));
			FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_STOCK_RETN, DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_STOCK_RETN));
			FUNC_PTR(ANIMATION_STATE_FINAL_KEYFRAME_SKIP_RETN, DUO_PTR(K_ANIMATION_STATE_FINAL_KEYFRAME_SKIP_RETN));

			static void** K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALLS[] = {
				CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_0),
				CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_1),
				CAST_PTR(void**,K_UNIT_ANIMATION_STATE_INTERRUPTABLE_CALL_2),
			};
			static void** K_UNIT_ANIMATION_BUSY_CALLS[] = {
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_0),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_1),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_2),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_3),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_4),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_5),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_6),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_7),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_8),
				CAST_PTR(void**,K_UNIT_ANIMATION_BUSY_CALL_9),
			};
			FUNC_PTR(UNIT_ANIMATION_STATE_LOOPS_CALL, DUO_PTR(K_UNIT_ANIMATION_STATE_LOOPS_CALL));
			FUNC_PTR(UNIT_ANIMATION_WEAPON_IK_CALL, DUO_PTR(K_UNIT_ANIMATION_WEAPON_IK_CALL));
			FUNC_PTR(UNIT_ANIMATION_VEHICLE_IK_CALL, DUO_PTR(K_UNIT_ANIMATION_VEHICLE_IK_CALL));
		}
	}
}

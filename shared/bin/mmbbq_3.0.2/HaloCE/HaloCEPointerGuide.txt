To start, run haloce.exe then run mmBBQ START.bat.


For updating all 1.09 client pointers to a different binary:
update_client_pointers("Path to 1.09 binary", "Path to different binary", "Target binaries version")

Example:
update_client_pointers("D:/Halo/Binaries/1.09/haloce.exe", "D:/Halo/Binaries/1.10/haloce.exe", "110")


For updating all 1.09 server pointers to a different binary:
update_server_pointers("Path to 1.09 binary", "Path to different binary", "Target binaries version")

Example:
update_server_pointers("D:/Halo/Binaries/1.09/haloceded.exe", "D:/Halo/Binaries/1.10/haloceded.exe", "110")


For finding a single pointer between two binaries:
update_pointer("Source Binary", "Target Binary", *Value*)

Example:
update_pointer("D:/Halo/Binaries/1.09/haloce.exe", "D:/Halo/Binaries/1.10/haloce.exe", 0x56F8EF)


To add a pointer to the pointer lists open the relevant list in the 1_09_Server/1_09_Client folder. Add an entry into the first table using the define name as the key, eg.

	["K_AI_UPDATE_HOOK"] =                                       0x42A959,

Insert an entry into the second table at the appropriate index, using the define name as the value. The second table is used for keeping the order of the pointers in the produced inl files consistent. Eg.

	[12] = "K_AI_UPDATE_HOOK",

For updating the indices in the second list, put tabs either side of the index using a replace all, copy the list into a spreadsheet, separating by tabs and use an auto incrementing drag to set the indices. You can then copy the data back into the table and remove the tabs.


Issues/Guidance:

1. Data pointers that are not directly referenced by code are not likely to be found. If the pointer you want to use is inside of a struct, define the struct instead and access it's member.
2. Pointers that are not on an instruction boundry might not be found, eg. pointing to the 6000h constant of a "mov eax, 6000h" instruction. Usually this works fine but it is prone to not finding the pointer or pointing to the wrong location. Try to point to the start of the instruction and add the offset in code where applicable.
3. Pointers to jump tables are not very reliable.
4. Verify your pointers. A quick code comparison in IDA will find most issues. Be vigilant in looking for register changes when checking hook pointers and function calls.
5. Use the Diff.txt to find obvious issues. If the pointer offset is unusually large it's probably a mismatch.

